const fs = require('fs');
const path = require('path');
const xlsx = require('xlsx'); // <-- New library
const { createClient } = require('@sanity/client');

// --- Sanity Client Configuration ---
const client = createClient({
Â  projectId: 'r1a9xgjr',
Â  dataset: 'production',
Â  apiVersion: '2021-10-21',
Â  useCdn: false,
Â  token: 'ski7OSxHCDxGrcmalQJHYrGoBYj3FO2gDyKcNR8PkpKcTTlnzFyzG4gAsUKuTRdz5FIXbGcQWS4AzLeROTXh0kUXkBNa4o5uroRmCkZAXgf7gxEbe20dWsDfO45iVYSuMKdbkO9jKWzWDBgBU879Qe0QTOHwKLdknAxX7a6rCmJmFgnmDG3j',
});

// --- File Path ---
// Using your correct file path
const EXCEL_FILE_PATH = path.join(__dirname, './backend/data/8 Tobacco Cessation.xlsx');
const SHEET_NAME = 'NLC'; // <-- Assuming this is the name of your sheet (tab) in Excel

async function importChallenges() {
Â  console.log('Starting Tobacco Challenge import from Excel...');

Â  try {
Â  Â  // 1. Read the Excel file
Â  Â  const workbook = xlsx.readFile(EXCEL_FILE_PATH);

Â  
Â  Â  // 2. Get the specific sheet
Â  Â  const worksheet = workbook.Sheets[SHEET_NAME];
Â  Â  if (!worksheet) {
Â  Â  Â  console.error(`Error: Sheet named "${SHEET_NAME}" not found in the Excel file.`);
Â  Â  Â  console.log('Available sheets:', Object.keys(workbook.Sheets));
Â  Â  Â  return;
Â  Â  }

Â  Â  // 3. Convert sheet to JSON
Â  Â  // We use `range: 4` to tell it that row 5 (index 4) is the header row,
Â  Â  // skipping the 4 blank rows at the top.
Â  Â  const challenges = xlsx.utils.sheet_to_json(worksheet, { range: 4 });

Â  Â  console.log(`Excel sheet processed. Found ${challenges.length} challenges.`);

Â  Â  if (challenges.length === 0) {
Â  Â  Â  console.log('No challenges found. Make sure the file and sheet name are correct.');
Â  Â  Â  return;
Â  Â  }

Â  Â  // 4. Prepare a Sanity transaction
Â  Â  let transaction = client.transaction();
Â  Â  let importedCount = 0;

Â  Â  for (const item of challenges) {
Â  Â  Â  // Get data using the exact header names from the Excel file
Â  Â  Â  const levelStr = item['Level'];
Â  Â  Â  const tfdStr = item['Tobacco Free Days (tfd)']; // This can be a string ("Start") or a number (0, 1, 3)
Â  Â  Â  const challengeText = item['Next Level Challenge'];
Â  Â  Â  const logic = item['Algorithm Logic'];
Â  Â  Â  
Â  Â  Â  const level = parseInt(levelStr, 10);
Â  Â  Â  
Â  Â  Â  // Skip invalid rows
Â  Â  Â  if (isNaN(level)) {
Â  Â  Â  Â  console.log(`Skipping invalid row (level is not a number):`, item);
Â  Â  Â  Â  continue;
Â  Â  Â  }

Â  Â  Â  // Split the multi-line challenge text into three fields
Â  Â  Â  const challengeLines = (challengeText || '').split('\n');
Â  Â  Â  
Â  Â  Â  // --- THIS IS THE FIX ---
Â  Â  Â  let tfdRequired;
Â  Â  Â  // First, check if tfdStr is a string, then check its value
Â  Â  Â  if (typeof tfdStr === 'string' && tfdStr.toLowerCase() === 'start') {
Â  Â  Â  Â  tfdRequired = 0; // This is for Level 0
Â  Â  Â  } else {
Â  Â  Â  Â  // For all other cases (including numbers 0, 1, 3...), just parse it.
Â  Â  Â  Â  tfdRequired = parseInt(tfdStr, 10);
Â  Â  Â  }
Â  Â  Â  // --- END OF FIX ---

Â  Â  Â  // 5. Create the Sanity document
Â  Â  Â  const doc = {
Â  Â  Â  Â  _type: 'tobaccoChallenge',
Â  Â  Â  Â  _id: `tobacco_challenge_level_${level}`, 
Â  Â  Â  Â  level: level,
Â  Â  Â  Â  tfdRequired: tfdRequired,
Â  Â  Â  Â  challengeText: challengeLines[0] || '',
Â  Â  Â  Â  challengeText2: challengeLines[1] || '',
Â  Â  Â  Â  challengeText3: challengeLines[2] || '',
Â  Â  Â  Â  algorithmLogic: logic || '',
Â  Â  Â  };

Â  Â  Â  // Add the document creation to our transaction
Â  Â  Â  transaction.createOrReplace(doc);
 Â  Â  importedCount++;
Â  Â  }

Â  Â  // 6. Commit the transaction to Sanity
Â  Â  await transaction.commit();
Â  Â  console.log(`\nðŸŽ‰ Success! Uploaded ${importedCount} challenges to Sanity.`);

Â  } catch (err) {
Â  Â  console.error('Error importing from Excel:', err.message);
Â  }
}

// --- Run Import ---
importChallenges();

